use crate::executable::VariableType;
use crate::parser::{BinOp, Constant, Expression};

// Statement Variable-Types, 0 = none / aa = not defined
//				 1- f= number of exp
//				11-1f= number of exp, exp 1 is a var
//              21-2f= number of exp, exp 2 is a var
//              0xf6 = special case procedure
//              0xf7 = special case dlockg
//              0xf8 = special case dcreate
//              0xf9 = special case sort
//				0xfa = varies exp, exp 1 is a var (redim)
//              0xfc = varies var (pop)
//              0xfd = label (goto)
//			    0xfe = varies exp (println)
//			    0xff = special case if
pub const STATEMENT_SIGNATURE_TABLE : [i32; 227]= [
    0xff,0x00,0x00,0x00,0x00,0x00,0x01,0xfd, //0
    0x12,0xfe,0xfe,0xff,0x02,0x02,0x02,0x22,
    0x04,0x04,0x04,0x01,0x22,0xfe,0xfe,0x00, //1
    0x01,0x03,0x00,0x00,0x00,0x00,0x01,0x00,
    0x01,0x02,0x26,0x23,0x23,0x23,0x23,0x23, //2
    0x23,0xfd,0x00,0x25,0x00,0x00,0x00,0x00,
    0x01,0x01,0x11,0x11,0x00,0x01,0x01,0x11, //3
    0x24,0x02,0x00,0x24,0x00,0xfe,0xfc,0x01,
    0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00, //4
    0x03,0x23,0x00,0x00,0x01,0x01,0x01,0x06,
    0x0a,0xf2,0xf2,0x02,0x02,0xf2,0x02,0x01, //5
    0x01,0x00,0x00,0x00,0x22,0x22,0x00,0x09,
    0x00,0x00,0x01,0x00,0xfe,0xfe,0xfe,0xfe, //6
    0x02,0x01,0x02,0x01,0x00,0x00,0x00,0x00,
    0x03,0x01,0x23,0x03,0x01,0x01,0x11,0xfe, //7
    0xfe,0x02,0x12,0x02,0x01,0x01,0x01,0xfa,
    0x02,0x02,0x00,0x00,0x00,0x01,0x01,0x01, //8
    0x01,0x01,0x01,0x01,0x01,0x01,0xf9,0x0a,
    0xf2,0x02,0x22,0x00,0xfe,0xfe,0x22,0x02, //9
    0x23,0x03,0x22,0x02,0x23,0x03,0x12,0x12,
    0x00,0x00,0x02,0x01,0x00,0xaa,0xaa,0xaa, //A
    0xf6,0x00,0xaa,0x00,0xaa,0x01,0xf8,0x03,
    0x01,0x02,0x01,0x00,0x01,0x02,0xf7,0x01, //B
    0x03,0x02,0x02,0x01,0x01,0x01,0x01,0x01,
    0x02,0x01,0x02,0x01,0x01,0x01,0x02,0x02, //C
    0x02,0x33,0x03,0x04,0x01,0x02,0x05,0x03,
    0x02,0x02,0x01,0x03,0x01,0x01,0x02,0x02, //D
    0x01,0x01,0x01,0x02,0x03,0x02,0x03,0x04,
    0x03,0x01,0x02                           //E
];

// Funktions Variable-Types, 0 = no exp / aa = not defined
//			     1- f= numbers of exp using ()
//              0x10 = only rvalue (!)
//			    0x11 = lvalue rvalue (+,-,...)
pub const FUNCTION_SIGNATURE_TABLE : [i32; 286]= [
    0xaa,0x10,0x10,0x11,0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x10, //F
    0x11,0x11,0xaa,0x01,0x01,0x01,0x03,0x02,
    0x02,0x01,0x01,0x01,0x01,0x02,0x00,0x02, //E
    0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //D
    0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
    0x00,0x00,0x00,0x01,0x03,0x02,0x00,0x01, //C
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x02, //B
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00, //A
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x01, //9
    0x01,0x02,0x01,0x02,0x02,0x00,0x00,0x00,
    0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x02, //8
    0x02,0x02,0x01,0x01,0x00,0x00,0x01,0x00,
    0x01,0x00,0x01,0x02,0x00,0x03,0x00,0x00, //7
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x01,0x02,0x01,0x00,0x04,0x00, //6
    0x00,0x03,0x02,0x01,0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, //5
    0x01,0x01,0x00,0x01,0x01,0x01,0x01,0x01,
    0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00, //4
    0x00,0x00,0x01,0x00,0x02,0x03,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00, //3
    0x02,0x01,0x00,0x00,0x00,0x01,0x01,0x01,
    0x02,0x01,0x01,0x01,0x01,0x02,0x02,0x01, //2
    0x01,0x02,0x00,0x00,0x01,0x00,0x03,0x01,
    0x02,0x01,0x01,0x01,0x02,0x01,0x02,0x02, //1
    0x01,0x01,0x01,0x01,0x01,0x02,0x01,0x02,
    0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03, //0
    0x04,0x01,0x01,0x01,0x01,0x01,0x01,0x04,
    0x00,0x00,0x01,0x01,0x00,0x00,0x02,0x01, //F
    0x00,0x02,0x01,0x01,0x01,0x06,0x00,0x01,
    0x01,0x01,0x01,0x01,0x01,0x00            //E
];

pub const TYPE_NAMES : [VariableType; 18] = [
    VariableType::Boolean,
    VariableType::Unsigned,
    VariableType::Date,
    VariableType::EDate,
    VariableType::Integer,
    VariableType::Money,
    VariableType::Real,
    VariableType::String,
    VariableType::Time,
    VariableType::Byte,
    VariableType::Word,
    VariableType::SByte,
    VariableType::SWord,
    VariableType::BigStr,
    VariableType::Real,
    VariableType::Unknown,
    VariableType::Unknown,
    VariableType::DDate
];


pub const CONSTANT_2_OFFSETS : [i32;18]  =  [
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
    0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11
];
pub const CONSTANT_2_NAMES : [Constant; 18] = [
    Constant::START_BAL,
    Constant::START_SESSION,
    Constant::DEB_CALL,
    Constant::DEB_TIME,
    Constant::DEB_MSGREAD,
    Constant::DEB_MSGCAP,
    Constant::DEB_MSGWRITE,
    Constant::DEB_MSGECHOED,
    Constant::DEB_MSGPRIVATE,
    Constant::DEB_DOWNFILE,
    Constant::DEB_DOWNBYTES,
    Constant::DEB_CHAT,
    Constant::DEB_TPU,
    Constant::DEB_SPECIAL,
    Constant::CRED_UPFILE,
    Constant::CRED_UPBYTES,
    Constant::CRED_SPECIAL,
    Constant::SEC_DROP
];

pub const CONSTANT_CONFERENCE_OFFSETS : [i32; 6] = [ 0x02, 0x10, 0x01, 0x04, 0x08, -1 ];
pub const CONSTANT_CONFERENCE_NAMES : [Constant; 5] = [ Constant::F_EXP, Constant::F_MW, Constant::F_REG, Constant::F_SEL, Constant::F_SYS ];

pub const CONSTANT_NAMES_OFFSETS : [i32; 5] = [ 0, 1, 4, 2, -1 ];
pub const CONSTANT_NAMES_DISPLAY : [Constant; 4] = [ Constant::DEFS, Constant::GRAPH, Constant::LANG, Constant::SEC ];

pub const CONSTANT_FACCESS_OFFSETS : [i32; 4] = [ 0, 2, 1, -1 ];
pub const CONSTANT_FACCESS_NAMES : [Constant; 3] = [ Constant::O_RD, Constant::O_RW, Constant::O_WR ];

pub const CONSTANT_SEEK_OFFSETS : [i32; 4] = [ 1, 2, 0, -1 ];
pub const CONSTANT_SEEK_NAMES : [Constant; 3] = [ Constant::SEEK_CUR, Constant::SEEK_END, Constant::SEEK_SET ];

pub const CONSTANT_OPENFLAGS_OFFSETS : [i32; 5] = [ 3, 0, 1, 2, -1 ];
pub const CONSTANT_OPENFLAGS_NAMES : [Constant; 4] = [ Constant::S_DB, Constant::S_DN, Constant::S_DR, Constant::S_DW ];

pub const CONSTANT_1_OFFSETS : [i32; 19]= [
    0x2000,
    0x0800,
    0x0000,
    0x0001,
    0x0020,
    0x0002,
    0x0004,
    0x1000,
    0x0100,
    0x0080,
    0x8000,
    0x10000,
    0x0040,
    0x0400,
    0x0010,
    0x0008,
    0x0200,
    0x4000,
    -1
];
pub const CONSTANT_1_NAMES : [Constant; 18] = [
    Constant::AUTO,
    Constant::BELL,
    Constant::DEFS,
    Constant::ECHODOTS,
    Constant::ERASELINE,
    Constant::FIELDLEN,
    Constant::GUIDE,
    Constant::HIGHASCII,
    Constant::LFAFTER,
    Constant::LFBEFORE,
    Constant::LOGIT,
    Constant::LOGITLEFT,
    Constant::NEWLINE,
    Constant::NOCLEAR,
    Constant::STACKED,
    Constant::UPCASE,
    Constant::WORDWRAP,
    Constant::YESNO
];

pub const CONSTANT_LINECOUNT_OFFSETS : [i32; 4] = [ 2, 1, 0, -1 ];
pub const CONSTANT_LINECOUNT_NAMES : [Constant; 3] = [ Constant::FCL, Constant::FNS,  Constant::NC ];

pub const BIN_EXPR : [BinOp; 19] = [
    BinOp::Add,
    BinOp::Add,
    BinOp::Sub,
    BinOp::PoW,
    BinOp::Mul,
    BinOp::Div,
    BinOp::Mod,
    BinOp::Add,
    BinOp::Sub,
    BinOp::Eq,
    BinOp::NotEq,
    BinOp::Lower,
    BinOp::LowerEq,
    BinOp::NotEq,
    BinOp::Greater,
    BinOp::GreaterEq,
    BinOp::Add, // ???
    BinOp::And,
    BinOp::Or,
    ];

pub const EXPR_NAMES : [&str; 286] = [
    "???","+","-","^","*","/","%","+","-","=","<>","<","<=",
    ">",">=","!","&","|","???","LEN","LOWER","UPPER","MID",
    "LEFT","RIGHT","SPACE","FERR","CHR","ASC","INSTR",
    "ABORT","LTRIM","RTRIM","TRIM","RANDOM","DATE","TIME",
    "U_NAME","U_LDATE","U_LTIME","U_LDIR","U_LOGONS",
    "U_FUL","U_FDL","U_BDLDAY","U_TIMEON","U_BDL","U_BUL",
    "YEAR","MONTH","DAY","DOW","HOUR","MIN","SEC",
    "TIMEAP","VER","NOCHAR","YESCHAR","STRIPATX",
    "REPLACE","STRIP","INKEY","STRING","MASK_PWD",
    "MASK_ALPHA","MASK_NUM","MASK_ALNUM","MASK_FILE",
    "MASK_PATH","MASK_ASCII","CURCONF","PCBDAT","PPEPATH",
    "VALDATE","VALTIME","U_MSGRD","U_MSGWR","PCBNODE",
    "READLINE","SYSOPSEC","ONLOCAL","UN_STAT","UN_NAME",
    "UN_CITY","UN_OPER","CURSEC","GETTOKEN","MINLEFT",
    "MINON","GETENV","CALLID","REGAL","REGAH","REGBL",
    "REGBH","REGCL","REGCH","REGDL","REGDH","REGAX",
    "REGBX","REGCX","REGDX","REGSI","REGDI","REGF",
    "REGCF","REGDS","REGES","B2W","PEEKB","PEEKW",
    "MKADDR","EXIST","I2S","S2I","CARRIER","TOKENSTR",
    "CDON","LANGEXT","ANSION","VALCC","FMTCC","CCTYPE",
    "GETX","GETY","AND","OR","XOR","NOT","U_PWDHIST",
    "U_PWDLC","U_PWDTC","U_STAT","DEFCOLOR","ABS",
    "GRAFMODE","PSA","FILEINF","PPENAME","MKDATE",
    "CURCOLOR","KINKEY","MINKEY","MAXNODE","SLPATH",
    "HELPPATH","TEMPPATH","MODEM","LOGGEDON","CALLNUM",
    "MGETBYTE","TOKCOUNT","U_RECNUM","U_INCONF","PEEKDW",
    "DBGLEVEL","SCRTEXT","SHOWSTAT","PAGESTAT",
    "REPLACESTR","STRIPSTR","TOBIGSTR","TOBOOLEAN",
    "TOBYTE","TODATE","TODREAL","TOEDATE","TOINTEGER",
    "TOMONEY","TOREAL","TOSBYTE","TOSWORD","TOTIME",
    "TOUNSIGNED","TOWORD","MIXED","ALIAS","CONFREG",
    "CONFEXP","CONFSEL","CONFSYS","CONFMW","LPRINTED",
    "ISNONSTOP","ERRCORRECT","CONFALIAS","USERALIAS",
    "CURUSER","U_LMR","CHATSTAT","DEFANS","LASTANS",
    "MEGANUM","EVTTIMEADJ","ISBITSET","FMTREAL","FLAGCNT",
    "KBDBUFSIZE","PPLBUFSIZE","KBDFILUSED","LOMSGNUM",
    "HIMSGNUM","DRIVESPACE","OUTBYTES","HICONFNUM",
    "INBYTES","CRC32","PCBMAC","ACTMSGNUM","STACKLEFT",
    "STACKERR","DGETALIAS","DBOF","DCHANGED","DDECIMALS",
    "DDELETED","DEOF","DERR","DFIELDS","DLENGTH","DNAME",
    "DRECCOUNT","DRECNO","DTYPE","FNEXT","DNEXT","TODDATE",
    "DCLOSEALL","DOPEN","DCLOSE","DSETALIAS","DPACK",
    "DLOCKF","DLOCK","DLOCKR","DUNLOCK","DNOPEN","DNCLOSE",
    "DNCLOSEALL","DNEW","DADD","DAPPEND","DTOP","DGO",
    "DBOTTOM","DSKIP","DBLANK","DDELETE","DRECALL","DTAG",
    "DSEEK","DFBLANK","DGET","DPUT","DFCOPY","DSELECT",
    "DCHKSTAT","PCBACCOUNT","PCBACCSTAT","DERRMSG",
    "ACCOUNT","SCANMSGHDR","CHECKRIP","RIPVER","QWKLIMITS",
    "FINDFIRST","FINDNEXT","USELMRS","CONFINFO","TINKEY",
    "CWD","INSTRR","FDORDAKA","FDORDORG","FDORDAREA",
    "FDOQRD","GETDRIVE","SETDRIVE","BS2I","BD2I","I2BS",
    "I2BD","FTELL","OS"
];
