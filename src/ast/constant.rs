#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, Clone)]
pub enum Constant
{
    Money(f64),
    Integer(i32),
    String(String),
    Double(f64),
    AUTO,
    BELL,
    DEFS,
    ECHODOTS,
    ERASELINE,
    FALSE,
    FCL,
    FIELDLEN,
    FNS,
    F_EXP,
    F_MW,
    F_REG,
    F_SEL,
    F_SYS,
    GRAPH,
    GUIDE,
    HIGHASCII,
    LANG,
    LFAFTER,
    LFBEFORE,
    LOGIT,
    LOGITLEFT,
    NC,
    NEWLINE,
    NOCLEAR,
    O_RD,
    O_RW,
    O_WR,
    SEC,
    SEEK_CUR,
    SEEK_END,
    SEEK_SET,
    STACKED,
    S_DB,
    S_DN,
    S_DR,
    S_DW,
    TRUE,
    UPCASE,
    WORDWRAP,
    YESNO,

    // Debug
    START_BAL,
    START_SESSION,
    DEB_CALL,
    DEB_TIME,
    DEB_MSGREAD,
    DEB_MSGCAP,
    DEB_MSGWRITE,
    DEB_MSGECHOED,
    DEB_MSGPRIVATE,
    DEB_DOWNFILE,
    DEB_DOWNBYTES,
    DEB_CHAT,
    DEB_TPU,
    DEB_SPECIAL,
    CRED_UPFILE,
    CRED_UPBYTES,
    CRED_SPECIAL,
    SEC_DROP,
}

impl Constant
{
    pub fn to_string(&self) -> String
    {
        match self {
            Constant::Money(f) => format!("${}", f),
            Constant::Integer(i) => format!("{}", i),
            Constant::String(str) => format!("\"{}\"", str),
            Constant::Double(f) => format!("{}", f),

            Constant::AUTO => String::from("AUTO"),
            Constant::BELL => String::from("BELL"),
            Constant::DEFS => String::from("DEFS"),
            Constant::ECHODOTS => String::from("ECHODOTS"),
            Constant::ERASELINE => String::from("ERASELINE"),
            Constant::FALSE => String::from("FALSE"),
            Constant::FCL => String::from("FCL"),
            Constant::FIELDLEN => String::from("FIELDLEN"),
            Constant::FNS => String::from("FNS"),
            Constant::F_EXP => String::from("F_EXP"),
            Constant::F_MW => String::from("F_MW"),
            Constant::F_REG => String::from("F_REG"),
            Constant::F_SEL => String::from("F_SEL"),
            Constant::F_SYS => String::from("F_SYS"),
            Constant::GRAPH => String::from("GRAPH"),
            Constant::GUIDE => String::from("GUIDE"),
            Constant::HIGHASCII => String::from("HIGHASCII"),
            Constant::LANG => String::from("LANG"),
            Constant::LFAFTER => String::from("LFAFTER"),
            Constant::LFBEFORE => String::from("LFBEFORE"),
            Constant::LOGIT => String::from("LOGIT"),
            Constant::LOGITLEFT => String::from("LOGITLEFT"),
            Constant::NC => String::from("NC"),
            Constant::NEWLINE => String::from("NEWLINE"),
            Constant::NOCLEAR => String::from("NOCLEAR"),
            Constant::O_RD => String::from("O_RD"),
            Constant::O_RW => String::from("O_RW"),
            Constant::O_WR => String::from("O_WR"),
            Constant::SEC => String::from("SEC"),
            Constant::STACKED => String::from("STACKED"),
            Constant::S_DB => String::from("S_DB"),
            Constant::S_DN => String::from("S_DN"),
            Constant::S_DR => String::from("S_DR"),
            Constant::S_DW => String::from("S_DW"),
            Constant::TRUE => String::from("TRUE"),
            Constant::UPCASE => String::from("UPCASE"),
            Constant::WORDWRAP => String::from("WORDWRAP"),
            Constant::YESNO => String::from("YESNO"),

            Constant::SEEK_CUR => String::from("SEEK_CUR"),
            Constant::SEEK_END => String::from("SEEK_END"),
            Constant::SEEK_SET => String::from("SEEK_SET"),

            Constant::START_BAL => String::from("?"),
            Constant::START_SESSION => String::from("?"),
            Constant::DEB_CALL => String::from("?"),
            Constant::DEB_TIME => String::from("?"),
            Constant::DEB_MSGREAD => String::from("?"),
            Constant::DEB_MSGCAP => String::from("?"),
            Constant::DEB_MSGWRITE => String::from("?"),
            Constant::DEB_MSGECHOED => String::from("?"),
            Constant::DEB_MSGPRIVATE => String::from("?"),
            Constant::DEB_DOWNFILE => String::from("?"),
            Constant::DEB_DOWNBYTES => String::from("?"),
            Constant::DEB_CHAT => String::from("?"),
            Constant::DEB_TPU => String::from("?"),
            Constant::DEB_SPECIAL => String::from("?"),
            Constant::CRED_UPFILE => String::from("?"),
            Constant::CRED_UPBYTES => String::from("?"),
            Constant::CRED_SPECIAL => String::from("?"),
            Constant::SEC_DROP => String::from("?")
        }
    }
}
